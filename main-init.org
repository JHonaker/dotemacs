* Startup

** early-init.el
:PROPERTIES:
:ID:       1082cc30-1731-4ab3-9192-77ed053df4d3
:END:

I rely on [[*Straight.el][Straight.el]] to manage my package installation needs. This
requires me to include a line in =early-init.el= that disables
=Package.el=.

#+begin_src elisp :tangle early-init.el

  ;; Do not initialize package.el at startup since we are using
  ;; straight.el to manage packages.
  (setq package-enable-at-startup nil)
  
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  
  ;; (setq inhibit-splash-screen t)
  (setq use-dialog-box t) ; only for mouse events
  (setq use-file-dialog nil)
  
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

I also include some minor tweaks. The most useful of which is
disabling the incessant compilation warnings from the native
compilation steps. These are typically just deprecation warnings for
code that I am not responsible for, and the constant pop-ups are very
distracting.

** init.el
:PROPERTIES:
:ID:       c318df5e-5cc2-44a2-85ad-ecc573358efa
:END:

This is the init.el file. It includes some code to rebuild the config
files when Emacs closes. When bootstrapping a new installation, open
this page in Emacs, and run =org-tangle=. It will produce the
=early-init.el=, =init.el=, and =main-init-el= files.

#+begin_src elisp :tangle init.el

  (defvar mentat-emacs-init-org "main-init.org"
    "Name of the Org mode file that provides the reference
  implementation of the init file.")
  
  (defvar mentat-emacs-init-el "main-init.el"
    "Name of the tangled init file from init.org")
  
  (defun mentat-emacs-load-config ()
    "Load the main configuration.
  
  First look for `mentat-emacs-init-el' and if that doesn't exist,
  look for and load `mentat-emacs-init-org'."
    (let ((init-el-file (locate-user-emacs-file mentat-emacs-init-el))
          (init-org-file (locate-user-emacs-file mentat-emacs-init-org)))
      (if (file-exists-p init-el-file)
          (load-file init-el-file)
        (require 'org)
        (org-babel-load-file init-org-file))))
  
  (mentat-emacs-load-config)
  
  ;; This is mostly taken from Prot:
  
  ;; This setup rebuilds the config from the Org file. Basically this
  ;; config treats the Org mode file as the source of truth. When the
  ;; session is closed, Emacs builds and compiles our init files from
  ;; `mentat-emacs-init-org'.
  
  ;; The idea of this is to spend time on close, when we're done
  ;; compiling and saving changes instead of when we start and want to
  ;; do something.
  
  ;; The following is for when we close the Emacs session.
  (declare-function org-babel-tangle-file "ob-tangle")
  
  (defun mentat-emacs-build-config ()
    "Produce Elisp init from the Org dotemacs.
  Add this to `kill-emacs-hook' to use the newest file inthe next session."
    (let ((init-el (locate-user-emacs-file mentat-emacs-init-el))
          (init-org (locate-user-emacs-file mentat-emacs-init-org)))
      (when (file-exists-p init-el)
        (delete-file init-el))
      (require 'org)
      (when (file-exists-p init-org)
        (org-babel-tangle-file init-org init-el)
        (byte-compile-file init-el))))
  
  (add-hook 'kill-emacs-hook #'mentat-emacs-build-config)
#+end_src

** Straight.el
:PROPERTIES:
:ID:       7ee7fbdc-aefc-4d90-977e-7bbc042b14fe
:END:

I've been spurned by MELPA's "push the most recent commit" philosophy,
so I use straight.el to manage my packages.

This is the bootstrapping code for installing it.

#+begin_src elisp 
  (setq straight-repository-branch "develop")
  (setq straight-use-package-by-default t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

In order for this to work properly we need to include the code in =early-init.el= to disable =Package.el=.

** Platform Detection
:PROPERTIES:
:ID:       2d70f060-fe42-47b9-91b7-7011c1461a77
:END:

At work I have to use Windows, and at home I use Linux. These
variables let me use platform specific configurations.

#+begin_src elisp
  (defconst on-windows (string-equal system-type "windows-nt"))
  (defconst on-linux (string-equal system-type "gnu/linux"))
#+end_src

** Add Local Lisp Libraries
:PROPERTIES:
:ID:       34ae9c6c-1d0f-413f-b589-d8b000474dba
:END:

I keep some Elisp files in =~/.config/emacs/local-lisp=. Put that in
the =load-path=.

#+begin_src elisp 
  (add-to-list 'load-path (locate-user-emacs-file "local-lisp"))
#+end_src

** Customization File
:PROPERTIES:
:ID:       f93b946b-5e49-4a3f-921d-daca0ce4fb6c
:END:

I moved the customizations from the Customization menu into their own
file so they don't get overwritten when the config re-tangles.

#+begin_src elisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file)
#+end_src

** Core Function Definitions
:PROPERTIES:
:ID:       c6ad6258-4ab1-45d6-b634-1cbfac01fc45
:END:

#+begin_src elisp
  (require 'mentat-core)
#+end_src

* Basic Configuration

** Emacs Server
:PROPERTIES:
:ID:       edefb72e-0207-4630-84ce-b338243cc2e4
:END:

Start the server for =emacsclient= if it's not already running.

#+begin_src elisp
  (unless (and (fboundp 'server-running-p)
               (server-running-p))
    (server-start))
#+end_src

** Recentf
:PROPERTIES:
:ID:       45c36ebf-86a1-42f9-9d9e-ddece3579f34
:END:

#+begin_src elisp
  (recentf-mode 1)
#+end_src

** Configuration Macro
:PROPERTIES:
:ID:       9dfed50a-06da-4d2a-bb20-65a7886dd9d6
:END:

This macro makes sure that a package is installed before it tries to
apply any configuration settings. I am not super happy with this. I
might get rid of it.

#+begin_src elisp 
  (defmacro config-with-package (package &rest body)
    "Requires PACKAGE and evaluates the forms in BODY. If there is an error, warn that loading failed.
  
  PACKAGE is a quoted symbol. BODY is a series of lisp forms."
    (declare (indent 1))
    `(if (require ,package nil 'noerror)
         (progn ,@body)
       (display-warning 'mentat-config
                        (format "Loading `%s' failed." ,package)
                        :warning)))
  #+end_src

** Helpful
:PROPERTIES:
:ID:       99566664-dd5f-4b12-992d-c60d71117807
:END:

Emacs default help is one of its best features. Helpful takes that to
another level. It includes basically all of the information that you'd
want immediatley including the original source code, references in
code, etc.

#+begin_src elisp 
  (straight-use-package 'helpful)
  (config-with-package 'helpful
    (let ((map help-map))
      (define-key map (kbd "f") 'helpful-callable)
      (define-key map (kbd "v") 'helpful-variable)
      (define-key map (kbd "k") 'helpful-key)
      (define-key map (kbd "F") 'helpful-function))
  
    (define-key mode-specific-map (kbd "C-d") 'helpful-at-point))
  #+end_src

** Which-key
:PROPERTIES:
:ID:       70ff6f61-93bd-415b-8c83-ffe703d68825
:END:

After learning about the =C-h= postfix, I don't use this as much. I've turned it off for now.

#+begin_src elisp 
  (straight-use-package 'which-key)
  ;; (config-with-package 'which-key)
  ;;   (which-key-mode)
  
#+end_src
  
** Emacs Behavioral Setup

*** Get Rid of that Damn Bell...
:PROPERTIES:
:ID:       28539f9b-6b77-41c1-aa1e-b972291fc661
:END:

I hate that damn beep. It goes off way too much. Instead of beeping,
flash the mode line with a specific face.

#+begin_src elisp 
  (defvar mode-line-alarm-flash-color "#F2804F")
  
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line mode-line-alarm-flash-color)
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))
#+end_src

*** Minibuffer Modifications
:PROPERTIES:
:ID:       335608f6-953f-4647-8e12-2650cd8d3135
:END:

I don't want to allow the cursor to enter the minibuffer prompt. This
always messes everything up when you, for instance, hit =C-a= to go to
the beginning of the prompt, and it places you inside the prompt text.

We also want to enable recursive minibuffers for things like Emabark.

#+begin_src elisp 
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t
          cursor-intangible t
          face minibuffer-prompt))
  
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  
  (setq enable-recursive-minibuffers t)
#+end_src

*** Config Quick Access
:PROPERTIES:
:ID:       d58667cc-e86b-41f9-b866-d26c18d70230
:END:

Before I used a literate config, I had this setup. I have it here,
only because it's one of the first Elisp function I wrote. I may
modify it in the future to give me access to this file.

#+begin_src elisp :tangle misc-src.el
  (defun jh/find-user-init-file (&optional open-current-window-p)
    "Edit the `user-init-file', in another window. C-u to open in current window."
    (interactive "P")
    (if open-current-window-p
        (find-file user-init-file)
      (find-file-other-window user-init-file)))
  ;; (global-set-key (kbd "C-c e i") 'jh/find-user-init-file)
#+end_src

*** Performance Optimizations
:PROPERTIES:
:ID:       221c7686-db66-4c53-9762-c16c0bacd4d6
:END:

I have read conflicting opinions on the garbage collector threshold. I
should revisit this as some point. I got these recommentations from
=lsp-mode= documentation.

#+begin_src elisp
  (setq gc-cons-threshold 80000000) ;; ~80mb
  (setq read-process-output-max (* 1024 1024)) ;; 1 mb
#+end_src

*** Nice Default Behavior
:PROPERTIES:
:ID:       01654769-0935-4e76-bfed-28df8d364e1a
:END:

- If on Emacs 28+:
  - Hide M-x commands we cannot use.
  - Compile elc files asynchronously
- Show matching parens if we are on a paren.
- Hide backup files

  #+begin_src elisp
    ;; Emacs 28+
    
    (defconst emacs-28+-p (>= (string-to-number (substring emacs-version 0 2))
                              28)
      "Is t if `emacs-version' is at least version 28.")
    
    (when emacs-28+-p
        (progn
          ;; Hide commands in M-x which do not work in the current mode.
          (setq read-extended-command-predicate
                #'command-completion-default-include-p)
    
          ;; Compile loaded .elc files asynchronously
          (setq native-comp-deferred-compilation t)))
    
    (when on-windows
      (setq ispell-program-name  "~/.emacs.d/hunspell/bin/hunspell.exe"))
    
    (show-paren-mode 1)
    
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
  #+end_src

*** Disable Suspend Frame and Overwrite Mode Keybindings
:PROPERTIES:
:ID:       3e500b6b-eb09-47cf-bcad-643910ec6a7d
:END:

I have never meant to activate either of these, and yet I have done it
so many times. The x and z keys are way too close to each other for
these to be sane defaults for "quit my program" and "use this before
the most common global key bindings."

#+begin_src elisp 
  (global-unset-key (kbd "<insert>"))
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
  #+end_src


* Custom Functions

** Open file as root

#+begin_src elisp
  (defun sudo-find-file (file-name)
    "Like find file, but opens the file as root."
    (interactive "FSudo Find File: ")
    (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
      (find-file tramp-file-name)))
#+end_src

* Visuals

** Fonts
:PROPERTIES:
:ID:       5c49c1d9-2150-4958-aa27-317121626fb6
:END:

I have a pretty basic font setup.

#+begin_src elisp 
  ;;(set-face-attribute 'default nil :font "Source Code Pro-10")
  ;; (set-face-attribute 'default nil :font "JuliaMono-10")
  ;; (set-face-attribute 'fixed-pitch nil :font "JuliaMono-10")
  ;; (set-face-attribute 'variable-pitch nil :font "Source Code Variable-10")
  (set-face-attribute 'default nil :font "Iosevka-10")
  (set-face-attribute 'fixed-pitch nil :font "Iosevka-10")
  (set-face-attribute 'variable-pitch nil :font "IosevkaEtoile-10")
#+end_src

** Dashboard
:PROPERTIES:
:ID:       65ca6672-31dd-4939-a0ee-d34658fc73f1
:END:

#+begin_src elisp
  (straight-use-package 'dashboard)
  (config-with-package 'dashboard
  
    (dashboard-setup-startup-hook)
  
    (setq dashboard-projects-backend 'project-el
          dashboard-items '((recents . 5)
                            (projects . 5)
                            (bookmarks . 5)
                            (agenda . 5)
                            (registers . 5))
          dashboard-set-footer nil))
#+end_src

** Themes
:PROPERTIES:
:ID:       20089b6a-e8e5-429c-83c7-251eeb24beb7
:END:

I like to switch themes a lot. I just have a giant list of them here.

#+begin_src elisp 
  (require 'mentat-theme-install)
  
  (defvar theme-list '(doom-themes
                       leuven-theme
                       brutalist-theme
                       challenger-deep-theme
                       darcula-theme
                       dracula-theme
                       eink-theme
                       espresso-theme
                       flatland-theme
                       gandalf-theme
                       naysayer-theme
                       northcode-theme
                       tao-theme
                       afternoon-theme
                       modus-themes
                       humanoid-themes
                       curry-on-theme
                       (nano-theme :type git
                                   :host github
                                   :repo "404cn/nano-theme.el")
                       plan9-theme))
  
  (mentat/install-themes theme-list)
  (load-theme 'modus-vivendi t)
#+end_src

** Fringe
:PROPERTIES:
:ID:       6bd945f1-f75e-4746-84ea-e128ab182606
:END:

#+begin_src elisp 
  ;;(fringe-mode (cons 15 15))
#+end_src

** Pulse
:PROPERTIES:
:ID:       9eb1c077-adbc-4547-86ad-2fe65e8d9d95
:END:

#+begin_src elisp 
  (config-with-package 'pulse
  (require 'mentat-pulse)
  (setq mentat-pulse-command-list
        '(recenter-top-bottom
          move-to-window-line-top-bottom
          reposition-window
          bookmark-jump
          other-window))
  (mentat-pulse-advice-commands-mode 1))
#+end_src

* Scratch Buffers
:PROPERTIES:
:ID:       acc3bc60-e620-457a-8450-1271f7727c50
:END:

I like scratch buffers a lot. They're really useful for just
prototyping something that I don't want to pollute by current file
with. When I'm working out a tough bug, I can end up with a lot of
commented out lines with half-working implementations. If I work with
scratch buffers, I can just copy the working code, bury the buffer,
and never think about it again instead of having to clean up any
intermediate steps.

Prefix the call to choose the major-mode. By default it creates one
with the current major-mode.

#+begin_src elisp 
  (straight-use-package 'scratch)
  (config-with-package 'scratch
    (defun mentat/scratch-buffer-setup ()
      "Add contents to `scratch' buffer and name it accordingly.
  If region is active, add its contents t o the new buffer."
      (let* ((mode major-mode)
             (string (format "Scratch buffer for: %s\n\n" mode))
             (region (with-current-buffer (current-buffer)
                       (if (region-active-p)
                           (buffer-substring-no-properties
                            (region-beginning)
                            (region-end)))
                       ""))
             (text (concat string region)))
        (when scratch-buffer
          (save-excursion
            (insert text)
            (goto-char (point-min))
            (comment-region (point-at-bol) (point-at-eol)))
          (forward-line 2))
        (rename-buffer (format "*Scratch for %s*" mode) t))))
  
  (add-hook 'scratch-create-buffer-hook #'mentat/scratch-buffer-setup)
  (define-key global-map (kbd "C-c s") #'scratch)
  
#+end_src

* Completion and Navigation

** Completion Styles

*** Orderless
:PROPERTIES:
:ID:       c6d75822-1b82-4522-acbe-64eb4581ada0
:END:

#+begin_src elisp 
  (straight-use-package 'orderless)
  (config-with-package 'orderless
    (require 'mentat-orderless)
  
    (savehist-mode 1)
  
    (setq completion-styles '(orderless))
    
    (setq orderless-matching-styles mentat-orderless-default-styles)
    (setq orderless-style-dispatchers
          '(mentat-orderless-literal-dispatcher
            mentat-orderless-initialism-dispatcher
            mentat-orderless-flex-dispatcher)))
  
#+end_src

** Completion Framework

I like to have a modular framework. Each package specializes in what
it does best, and together they provide a lot of
functionality. Vertico and Corfu in particular try to remain
completely compatible with the default Emacs interfaces like
=completing-read= and =completion-at-point-function=.

*** Vertico
:PROPERTIES:
:ID:       08b8a5db-dc17-4dc2-b502-ad98bdd4e3f3
:END:

#+begin_src elisp 
  (straight-use-package 'vertico)
  (config-with-package 'vertico
    (vertico-mode 1))
#+end_src

*** Marginalia
:PROPERTIES:
:ID:       55f0cdd0-c99d-437f-8015-941ac00bbb5f
:END:

#+begin_src elisp 
  (straight-use-package 'marginalia)
  (config-with-package 'marginalia
    (marginalia-mode 1)
    
    (define-key minibuffer-local-map (kbd "M-A") 'marginalia-cycle))
#+end_src

*** Corfu
:PROPERTIES:
:ID:       da1767ec-c176-4dd1-a092-e6182794fdca
:END:

#+begin_src elisp 
  (straight-use-package 'corfu)
  (setq tab-always-indent 'complete)
  (corfu-global-mode 1)
#+end_src

**** (Disabled) Company

I am trying out Corfu right now.

#+begin_src elisp :tangle no
  ;; (straight-use-package 'company)
  ;; (config-with-package 'company
  ;;   (global-company-mode 1)
  
  ;;   (setq company-idle-delay 0.05)
  ;;   (company-minimum-prefix-length 2))
  
  ;; (straight-use-package 'company-math)
  ;; (config-with-package 'company-math
  ;;   (add-to-list 'company-backends 'company-math-symbols-unicode))
  
  ;; (straight-use-package 'company-auctex)
  ;; (config-with-package 'company-auctex
  ;;   (company-auctex-init))
#+end_src

** Consult
:PROPERTIES:
:ID:       e6ad3ecc-f650-4019-b359-5d7414b3fb1b
:END:

#+begin_src elisp 
  (straight-use-package 'consult)
  (config-with-package 'consult
  
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)
  
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)
  
    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
  
    ;; For some reason project-root wasn't introduced until 28+
    (unless emacs-28+-p 
      (defun project-root (project)
        (car (project-roots project))))
  
    (setq consult-narrow-key "<") 
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (project-root project))))
  
    ;;; Keybindings
  
    (define-key help-map (kbd "a") 'consult-apropos)
  
    (let ((map mode-specific-map))
      (define-key map (kbd "h") 'consult-history)
      (define-key map (kbd "m") 'consult-mode-command)
      (define-key map (kbd "b") 'consult-bookmark)
      (define-key map (kbd "k") 'consult-kmacro))
  
    (let ((map ctl-x-map))
      (define-key map (kbd "M-:") 'consult-complex-command) ;; orig. repeat-complex-command
      (define-key map (kbd "b") 'consult-buffer) ;; orig. switch-to-buffer
      (define-key map (kbd "4 b") 'consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
      (define-key map (kbd "5 b") 'consult-buffer-other-frame)) ;; orig. switch-to-buffer-other-frame
  
    (let ((map goto-map)) ;; M-g
      (define-key map (kbd "e") 'consult-compile-error) 
      (define-key map (kbd "f") 'consult-flymake) ;; Alternative consult-flycheck
      (define-key map (kbd "g") 'consult-goto-line) ;; orig. goto-line
      (define-key map (kbd "M-g") 'consult-goto-line) ;; orig. goto-line
      (define-key map (kbd "o") 'consult-outline) ;; Alt: consult-org-heading
      (define-key map (kbd "m") 'consult-mark)
      (define-key map (kbd "k") 'consult-global-mark)
      (define-key map (kbd "i") 'consult-imenu)
      (define-key map (kbd "I") 'consult-preoject-imenu))
  
    (let ((map search-map))
      (define-key map (kbd "f") 'consult-find)
      (define-key map (kbd "L") 'consult-locate)
      (define-key map (kbd "g") 'consult-grep)
      (define-key map (kbd "G") 'consult-git-grep)
      (define-key map (kbd "r") 'consult-ripgrep)
      (define-key map (kbd "l") 'consult-line)
      (define-key map (kbd "m") 'consult-multi-occur)
      (define-key map (kbd "k") 'consult-keep-lines)
      (define-key map (kbd "u") 'consult-focus-lines)
      ;; Isearch integration
      (define-key map (kbd "e") 'consult-isearch))
  
    (let ((map isearch-mode-map))
      (define-key map (kbd "M-e") 'consult-isearch)
      (define-key map (kbd "M-s e") 'consult-isearch)
      (define-key map (kbd "M-s l") 'consult-line))
  
    (let ((map global-map))
      ;; Register commands
      (define-key map (kbd "M-#") 'consult-register-load)
      (define-key map (kbd "M-'") 'consult-register-store) ; orig. abbrev-prefix-mark (unrelated)
      (define-key map (kbd "C-M-#") 'consult-register)
      ;; Yank commands
      (define-key map (kbd "M-y") 'consult-yank-pop)))
  
#+end_src


** wgrep - Writeable Grep
:PROPERTIES:
:ID:       d38bbe8f-7a2b-4456-8156-7920ade3e388
:END:

#+begin_src elisp 
  (straight-use-package 'wgrep)
  (require 'wgrep)
#+end_src

** Embark
:PROPERTIES:
:ID:       a1e0c322-d96c-4eb5-966b-962e7fb1fb51
:END:

#+begin_src elisp 
  (straight-use-package 'embark)
  (config-with-package 'embark
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command) ;; by default describe-prefix-bindings
  
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))
  
    (let ((map global-map))
      (define-key map (kbd "C-.") 'embark-act)
      (define-key map (kbd "C-;") 'embark-dwim)
      (define-key map (kbd "C-h B") 'embark-bindings)))
#+end_src

*** Embark/Consult Interaction
:PROPERTIES:
:ID:       dd7127a9-2ba0-470c-ad38-e76b6e7b2f42
:END:

#+begin_src elisp 
  (straight-use-package 'embark-consult)
  (config-with-package 'embark-consult
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
  #+end_src

** Navigation

*** Dumb Jump
:PROPERTIES:
:ID:       909d1981-f4c4-4d57-bfae-fbc2244f855e
:END:

#+begin_src elisp 
  (straight-use-package 'dumb-jump)
#+end_src

*** Window Navigation
:PROPERTIES:
:ID:       20cafa44-4521-42b3-b04f-5396f172a079
:END:

#+begin_src elisp 
  (if emacs-28+-p
      ;; Repeatable key chords (Emacs 28+)
      (config-with-package 'repeat
        (defvar resize-window-repeat-map
          (let ((map (make-sparse-keymap)))
            (define-key map "^" 'enlarge-window)
            (define-key map "}" 'enlarge-window-horizontally)
            (define-key map "{" 'shrink-window-horizontally)
            (define-key map "v" 'shrink-window)
            map)
          "Keymap to repeat window resizing commands. Used in `repeat-mode'.")
        (put 'enlarge-window 'repeat-map 'resize-window-repeat-map)
        (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map)
        (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map)
        (put 'shrink-window 'repeat-map 'resize-window-repeat-map)
  
        (repeat-mode 1)))
#+end_src

** Outline Minor Mode

#+begin_src elisp
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
  
#+end_src

* Programming

** LSP Mode
:PROPERTIES:
:ID:       87bf3f27-d26c-421a-a525-451321e644de
:END:

A modern text editor would not be complte without an LSP configuration.

#+begin_src elisp 
  (straight-use-package 'lsp-mode)
  (config-with-package 'lsp-mode
    (setq lsp-keymap-prefix "C-x l"))
  #+end_src

** Lisp
:PROPERTIES:
:ID:       1ea64de2-3eb4-470f-8e59-e5fad8366a13
:END:

Paredit is incredible for editing Lisp-like languages. I tried Lispy,
but it required too many conditions for the kebindings to activate for
me. I like that I can activate the movemnts across S-Expressions
anywhere with Paredit.

#+begin_src elisp 
  (straight-use-package 'paredit)
  (config-with-package 'paredit
  
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-hook #'enable-paredit-mode)
    (add-hook 'racket-mode-hook #'enable-paredit-mode)
    
    (let ((map paredit-mode-map))
      ;; Switch C-backspace to use paredit-backward-kill to prevent
      ;; unbalancing parentheses
      (define-key map (kbd "<C-backspace>") 'paredit-backward-kill-word)
      (define-key map (kbd "<M-backspace>") 'backward-kill-word)
      ;; Remap the splice and split to not conflict with `search-map'.
      (define-key map (kbd "M-s") nil)
      (define-key map (kbd "M-S") nil)
      (define-key map (kbd "M-S s") 'paredit-splice-sexp)
      (define-key map (kbd "M-S S") 'paredit-split-sexp)))
  #+end_src

*** Common Lisp
:PROPERTIES:
:ID:       fec53bc6-6fc7-4bb8-a19b-5f286f4a3299
:END:

SLY is basically just a more featureful version of SLIME.

#+begin_src elisp 
  (straight-use-package 'sly)
  (config-with-package 'sly
    (setq inferior-lisp-program "sbcl"))
  #+end_src

*** Racket
:PROPERTIES:
:ID:       263cff36-5f78-4b98-a47b-3376a58d3838
:END:

#+begin_src elisp 
  (straight-use-package 'racket-mode)
  (config-with-package 'racket-mode
    (add-hook 'racket-mode-hook #'racket-xp-mode))
  #+end_src

** R
:PROPERTIES:
:ID:       34e53954-af1b-4a0a-b9f8-326d75c07dcb
:END:

ESS is an excellent development environment for R!

#+begin_src elisp 
  (straight-use-package 'ess)
  (config-with-package 'ess
    (setq ess-use-flymake t))
#+end_src

** Julia
:PROPERTIES:
:ID:       2721b73e-f525-4927-8f2a-ee9ab9e646e9
:END:

This is in flux right now. I was using Julia mode and Julia-repl, but
I am trying out julia-snail again. It seems to be much better than the
last time I tried it.

#+begin_src elisp 
  (straight-use-package 'julia-mode)
  (straight-use-package 'julia-repl)
  ;;(straight-use-package 'julia-snail)
  ;;(add-hook 'julia-mode-hook #'julia-snail-mode)
    
  (config-with-package 'julia-mode
    (setenv "JULIA_NUM_THREADS" "4")
    (add-hook 'julia-mode-hook #'julia-repl-mode))
  
  (straight-use-package 'lsp-julia)
  (config-with-package 'lsp-julia
    (add-hook 'julia-mode-hook #'lsp-deferred)
    (setq lsp-julia-default-environment "~/.julia/environments/v1.6"))
  
#+end_src

** Python
:PROPERTIES:
:ID:       87d9595c-9167-4563-a363-ed591d387b49
:END:

I have heard that Elpy is the way to go, but I don't use Python that
much right now.

#+begin_src elisp 
  (config-with-package 'python
    (setq python-indent-offset 4))
  
  (straight-use-package 'pyvenv)
  (config-with-package 'pyvenv
    (setenv "WORKON_HOME" "~/.envs/"))
  #+end_src

** LaTeX - AucTeX
:PROPERTIES:
:ID:       77752ebe-b60e-450c-9a1e-4bc4b53109bd
:END:

#+begin_src elisp 
  (straight-use-package 'auctex)
  
  (load "auctex.el" nil t t)
  ;; (load "preview-latex.el" nil t t)
  
  (add-to-list 'auto-mode-alist '("\\.tex\\'" . LaTeX-mode))
  
  (add-hook 'LaTeX-mode-hook #'TeX-fold-mode)
  
  (autoload #'LaTeX-math-mode "latex")
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-PDF-mode t)
  
  (setq-default TeX-master nil)
  
#+end_src

*** LaTeX LSP Server - Digestif

#+begin_src elisp
  (setq lsp-tex-server 'digestif)
#+end_src

** Nix
:PROPERTIES:
:ID:       5fdca3b8-725c-4fdc-956e-1ce0c475b1e9
:END:

#+begin_src elisp
  (straight-use-package 'nix-mode)
#+end_src
  
** Less Frequently Used Languages

*** GDScript
:PROPERTIES:
:ID:       3f192913-d3c3-4f84-aed9-f589d18b2615
:END:
#+begin_src elisp 
  (straight-use-package 'gdscript-mode)
  (config-with-package 'gdscript-mode
    (setq gdscript-use-tab-indents nil))
#+end_src

** Markdown Mode
:PROPERTIES:
:ID:       b89d438c-a775-495d-9b08-52465ea936d9
:END:

#+begin_src elisp 
  (straight-use-package 'markdown-mode)
  
  ;;;###autoload
  (defun markdown-compile-pandoc (beg end output-buffer)
    "Compiles markdown with the pandoc program, if available.
    Returns its exit code."
    (when (executable-find "pandoc")
      (call-process-region beg end "pandoc" nil output-buffer nil
                           "-f" "markdown"
                           "-t" "html"
                           "--mathjax"
                           "--highlight-style=pygments")))
  
  (config-with-package 'markdown-mode
      (add-to-list 'auto-mode-alist '("/README\\(|:\\.md\\)?\\'" . gfm-mode))
  
      (with-eval-after-load 'markdown-mode
        
        (setq markdown-enable-math t ; syntax highlighting for latex fragments
              markdown-enable-wiki-links t
              markdown-italic-underscore t
              markdown-asymmetric-header t
              markdown-fontify-code-blocks-natively t
              markdown-gfm-uppercase-checkbox t ; for compat with org-mode
              markdown-gfm-additional-languages '("sh")
              markdown-make-gfm-checkboxes-buttons t
  
              markdown-command #'markdown-compile-pandoc
              ;; This is set to `nil' by default, which causes a wrong-type-arg error
              ;; when you use `markdown-open'. These are more sensible defaults.
              markdown-open-command "xdg-open"
  
              ;; A sensible and simple default preamble for markdown exports that
              ;; takes after the github asthetic (plus highlightjs syntax coloring).
              markdown-content-type "application/xhtml+xml"
              markdown-css-paths
              '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
              markdown-xhtml-header-content
              (concat "<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>"
                      "<style> body { box-sizing: border-box; max-width: 740px; width: 100%; margin: 40px auto; padding: 0 10px; } </style>"
                      "<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>"
                      "<script>document.addEventListener('DOMContentLoaded', () => { document.body.classList.add('markdown-body'); document.querySelectorAll('pre[lang] > code').forEach((code) => { code.classList.add(code.parentElement.lang); }); document.querySelectorAll('pre > code').forEach((code) => { hljs.highlightBlock(code); }); });</script>"))))
  
#+end_src

** HL-TODO
:PROPERTIES:
:ID:       ff678b4c-be0e-46f7-8a07-a51dda7013e5
:END:

Give TODO comments some special looks

#+begin_src elisp 
  (straight-use-package 'hl-todo)
  (config-with-package 'hl-todo
    (add-hook 'prog-mode-hook #'hl-todo-mode)
    (setq
     hl-todo-highlight-punctuation ":"
     hl-todo-keyword-faces
     `(;; For things that need to be done, just not today.
       ("TODO" warning bold)
       ;; For problems that will become bigger problems later if not
       ;; fixed ASAP.
       ("FIXME" error bold)
       ;; For tidbits that are unconventional and not intended uses of the
       ;; constituent parts, and may break in a future update.
       ("HACK" font-lock-constant-face bold)
       ;; For things that were done hastily and/or hasn't been thoroughly
       ;; tested. It may not even be necessary!
       ("REVIEW" font-lock-keyword-face bold)
       ;; For especially important gotchas with a given implementation,
       ;; directed at another user other than the author.
       ("NOTE" success bold)
       ;; For things that just gotta go and will soon be gone.
       ("DEPRECATED" font-lock-doc-face bold)
       ;; For a known bug that needs a workaround
       ("BUG" error bold)
       ;; For warning about a problematic or misguiding code
       ("XXX" font-lock-constant-face bold))))
#+end_src


** Miscellaneous
:PROPERTIES:
:ID:       0df1ae65-7cca-4835-b041-42ef0d1d6602
:END:

These modes don't require additional configuration, (or I haven't done
it yet) so I've just collected them here.

#+begin_src elisp 
  (straight-use-package 'emacsql-sqlite3)
  (straight-use-package 'autothemer)
  (straight-use-package 'olivetti)
  (straight-use-package 'hydra)
  (straight-use-package 'ein)
  (straight-use-package 'yasnippet)
  (straight-use-package 'bufler)
  (straight-use-package 'rainbow-mode)
  (straight-use-package 'rainbow-delimiters)
  (straight-use-package 'prism)
#+end_src

* Org Mode
:PROPERTIES:
:ID:       79257edc-7950-4c14-8c32-f5ef049e4720
:END:

#+begin_src elisp 
  (straight-use-package 'org)
  (straight-use-package 'org-ql)
  (straight-use-package 'org-super-agenda)
  
  (require 'org)
  (require 'mentat-org-setup)
  #+end_src

* Bookmarks
:PROPERTIES:
:ID:       21c6901a-2155-4534-896b-e08eb3406383
:END:

I do not like the overlay that gets put over bookmarked locations. It
is especially annoying with Org refile commands.

#+begin_src elisp
  (setq bookmark-fontify nil)
  (setq org-capture-bookmark nil)
#+end_src

* Other Modes

** vterm
:PROPERTIES:
:ID:       5038d784-e055-400f-ba27-b3e6b20a4cd6
:END:

#+begin_src elisp
  (when on-linux
    (straight-use-package 'vterm))
#+end_src

** Magit
:PROPERTIES:
:ID:       6b284480-8347-40b0-9581-c7235726613a
:END:

#+begin_src elisp 
  (straight-use-package 'magit)
  (config-with-package 'magit
    (define-key ctl-x-map (kbd "g") 'magit-status))
  #+end_src

** Deft
:PROPERTIES:
:ID:       0bbca5d0-e9ed-4746-8ae3-99bba47f5248
:END:

#+begin_src elisp 
(straight-use-package 'deft)
(config-with-package 'deft

  (setq deft-directory "~/org/zk/"
	deft-extensions '("org" "md" "markdown" "txt")
	deft-default-extension "org")
  
  (define-key global-map (kbd "C-c d") 'deft))
#+end_src

** Elfeed
:PROPERTIES:
:ID:       73ccf52d-4dee-45d1-8490-3300829602e1
:END:

#+begin_src elisp 
(straight-use-package 'elfeed)
(straight-use-package 'elfeed-org)
(require 'elfeed)
(require 'elfeed-org)
(elfeed-org)
#+end_src

** KMonad Configuration Language

#+begin_src elisp
  (straight-use-package '(kbd-mode :type git
                                   :host github
                                   :repo "kmonad/kbd-mode"))
#+end_src
* Late Stage Setup
** Envrc
:PROPERTIES:
:ID:       6ebe6a7b-be3d-4c58-ac10-05c65fbe0a2b
:END:

Envrc integrates with =direnv=, a program that allows you to set
environment variables local to a directory. Envrc uses the .envrc
files and direnv to set buffer local environment variables in Emacs,
so that things like local virtual environments or Nix environments are
more easily accessible. I should probably look into Lorri, for Nix
integration at some point as well.

#+begin_src elisp
  (when on-linux
    (straight-use-package 'envrc)
    (config-with-package 'envrc
      (envrc-global-mode)))
#+end_src


* Testing
** Boon Modal Editing

#+begin_src elisp
  ;;(straight-use-package 'boon)
  ;;(require 'boon-qwerty)
  ;;(boon-mode)
#+end_src

** God Mode

#+begin_src elisp
  ;;(straight-use-package 'god-mode)
  ;;(require 'god-mode)
  ;;(global-set-key (kbd "<escape>") #'god-local-mode)
  
  ;; (defun my-god-mode-update-cursor-type ()
  ;;   (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))
  
  ;; (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
  
  ;; (defun my-god-mode-update-mode-line ()
  ;;   (cond
  ;;    (god-local-mode
  ;;     (set-face-attribute 'mode-line nil
  ;;                         :foreground "#604000"
  ;;                         :background "#fff29a")
  ;;     (set-face-attribute 'mode-line-inactive nil
  ;;                         :foreground "#3f3000"
  ;;                         :background "#fff3da"))
  ;;    (t
  ;;     (set-face-attribute 'mode-line nil
  ;; 			:foreground "#0a0a0a"
  ;; 			:background "#d7d7d7")
  ;;     (set-face-attribute 'mode-line-inactive nil
  ;; 			:foreground "#404148"
  ;; 			:background "#efefef"))))
  ;; ;; Or try 'god-mode-enabled-hook and 'god-mode-disabled-hook or `window hooks'.
  ;; (add-hook 'post-command-hook 'my-god-mode-update-mode-line)
  
  ;;(define-key god-local-mode-map (kbd "z") #'repeat)
  ;;(define-key god-local-mode-map (kbd "i") #'god-local-mode)
#+end_src

* Other Interesting Configs

- [[https://ogbe.net/emacs/startup.html][Dennis Ogbe]]: Maintains a very reproducible setup with a simpler implementation of Spacemacs-like layers.
